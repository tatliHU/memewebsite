#cloud-config

apt:
  sources:
    postgresql.list:
      source: "deb http://apt.postgresql.org/pub/repos/apt bookworm-pgdg main"
      keyid: B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8

write_files:
  - path: /etc/environment
    content: |
      SESSION_KEY=${session_encoder_key}
    append: true
  - path: /etc/systemd/system/meme.service
    content: |
      [Unit]
      Description=Meme service
      After=network.target
      [Service]
      WorkingDirectory=/var/memewebsite
      ExecStart=gunicorn -w 4 'main:app' -b 0.0.0.0:5000
      User=www-data
      Group=www-data
      Restart=always

      Environment="SESSION_KEY=${session_encoder_key}"
      Environment="S3_BUCKET=${aws_image_bucket}"
      Environment="DOMAIN=${domain}"
      Environment="WEBSITE_URL=https://${domain}"
      Environment="AWS_REGION=${aws_region}"
      Environment="AWS_DEFAULT_REGION=${aws_region}"
      Environment="AWS_ACCESS_KEY_ID=${aws_access_key_id}"
      Environment="AWS_SECRET_ACCESS_KEY=${aws_secret_access_key}"
      Environment="DEBUG=${debug}"
      Environment="NOTIFY_ADMINS=${notify_admins}"
  - path: /tmp/db_init.sql
    content: | 
      CREATE USER ${username} WITH PASSWORD '${password}';
      CREATE DATABASE meme WITH OWNER ${username};
      \c meme;
      CREATE EXTENSION tsm_system_rows;
      CREATE TABLE users (
          username VARCHAR(25) NOT NULL,
          password TEXT NOT NULL,
          email VARCHAR(50) NOT NULL,
          admin BOOLEAN DEFAULT false,
          PRIMARY KEY (username)
      );

      CREATE TABLE posts (
          post_id SERIAL,
          title VARCHAR(50) NOT NULL,
          url VARCHAR(255) NOT NULL,
          published INT NOT NULL,
          username VARCHAR(25) NOT NULL,
          approver VARCHAR(25),
          approved BOOLEAN,
          tag_all BOOLEAN DEFAULT false,
          tag_emk BOOLEAN DEFAULT false,
          tag_gpk BOOLEAN DEFAULT false,
          tag_epk BOOLEAN DEFAULT false,
          tag_vbk BOOLEAN DEFAULT false,
          tag_vik BOOLEAN DEFAULT false,
          tag_kjk BOOLEAN DEFAULT false,
          tag_ttk BOOLEAN DEFAULT false,
          tag_gtk BOOLEAN DEFAULT false,
          FOREIGN KEY (username) REFERENCES users(username),
          FOREIGN KEY (approver) REFERENCES users(username),
        PRIMARY KEY (post_id)
      );

      CREATE TABLE votes (
        post_id INT NOT NULL,
        username VARCHAR(25) NOT NULL,
        vote SMALLINT NOT NULL CHECK (vote IN (-1, 1)),
        FOREIGN KEY (post_id) REFERENCES posts(post_id),
        FOREIGN KEY (username) REFERENCES users(username)
      );

      CREATE TABLE pending_registrations (
          email VARCHAR(40) NOT NULL,
          uuid VARCHAR(36) NOT NULL,
          username VARCHAR(25) NOT NULL,
          password TEXT NOT NULL,
          created INT NOT NULL,
          PRIMARY KEY (email)
      );
      CREATE TABLE pending_passwords (
          email VARCHAR(40) NOT NULL,
          uuid VARCHAR(36) NOT NULL,
          username VARCHAR(25) NOT NULL,
          created INT NOT NULL,
          PRIMARY KEY (email)
      );
      CREATE TABLE comments (
          comment_id SERIAL,
          post_id INT NOT NULL,
          username VARCHAR(25) NOT NULL,
          text VARCHAR(250) NOT NULL,
          created INT NOT NULL,
          PRIMARY KEY (comment_id)
      );
      GRANT ALL PRIVILEGES ON TABLE users TO ${username};
      GRANT ALL PRIVILEGES ON TABLE posts TO ${username};
      GRANT ALL PRIVILEGES ON TABLE votes TO ${username};
      GRANT ALL PRIVILEGES ON TABLE pending_registrations TO ${username};
      GRANT ALL PRIVILEGES ON TABLE pending_passwords TO ${username};
      GRANT ALL PRIVILEGES ON TABLE comments TO ${username};
      GRANT USAGE, SELECT, UPDATE ON SEQUENCE posts_post_id_seq TO ${username};
      GRANT USAGE, SELECT, UPDATE ON SEQUENCE comments_comment_id_seq TO ${username};
  - path: /etc/backup-script.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      mkdir -p /tmp/dump
      dumpfile=/tmp/dump/$(date +"%F-%H-%M-%S").tar
      pg_dump meme --format=tar --file=$dumpfile
      aws s3 cp $dumpfile s3://${aws_backup_bucket}
      rm -R /tmp/dump
  - path: /etc/systemd/system/backup.service
    content: |
      [Unit]
      Description=Backup service
      [Service]
      Type=oneshot
      ExecStart=/etc/backup-script.sh
      User=postgres
      Environment="AWS_REGION=${aws_region}"
      Environment="AWS_ACCESS_KEY_ID=${aws_access_key_id}"
      Environment="AWS_SECRET_ACCESS_KEY=${aws_secret_access_key}"
  - path: /etc/systemd/system/backup.timer
    content: |
      [Unit]
      Description=Backup timer
      [Timer]
      OnCalendar=daily
      Persistent=true
      [Install]
      WantedBy=timers.target
  - path: /etc/restore-script.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      echo "Remember to create a backup of the current data before you do a restore."
      read -p "Do you really want to do a restore? (Y/N): " answer
      if [[ "$answer" != "Y" ]]; then
          exit 0
      fi
      mkdir -p /tmp/restore
      select ITEM in $(aws s3 ls s3://${aws_backup_bucket} | awk '{print $4}')
      do
        psql -c "DROP DATABASE meme;"
        psql -c "CREATE DATABASE meme WITH OWNER ${username};"
        aws s3 cp s3://${aws_backup_bucket}/$ITEM /tmp/restore
        tar -xvf /tmp/restore/$ITEM -C /tmp/restore
        pg_restore --dbname=meme --format=directory /tmp/restore
        break
      done
      rm -R /tmp/restore
  - path: /etc/systemd/system/backup.service
    content: |
      [Unit]
      Description=Backup service
      [Service]
      Type=oneshot
      ExecStart=/etc/backup-script.sh
      User=postgres
      Environment="AWS_REGION=${aws_region}"
      Environment="AWS_ACCESS_KEY_ID=${aws_access_key_id}"
      Environment="AWS_SECRET_ACCESS_KEY=${aws_secret_access_key}"
  - path: /tmp/haproxy.txt
    content: |
      frontend http_in
              bind *:443 ssl crt /etc/ssl/certs/haproxy.pem
              option httplog
              redirect scheme https if !{ ssl_fc }  # Redirect HTTP to HTTPS
              default_backend app_backend
      backend app_backend
              option httpchk
              server web1 127.0.0.1:5000 check

runcmd:
  - apt-get update
  - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  - unzip awscliv2.zip
  - ./aws/install

  - DEBIAN_FRONTEND=noninteractive apt-get -y install --no-install-recommends postgresql-16
  - sudo -u postgres psql -f /tmp/db_init.sql
  - echo "host meme ${username} 127.0.0.1/32 scram-sha-256" >> /etc/postgresql/16/main/pg_hba.conf
  - sudo -u postgres psql -c "SELECT pg_reload_conf();"

  - apt -y install python3 python3-venv libaugeas0
  - python3 -m venv /opt/certbot/
  - /opt/certbot/bin/pip install --upgrade pip
  - /opt/certbot/bin/pip install certbot
  - ln -s /opt/certbot/bin/certbot /usr/bin/certbot
  - certbot certonly --standalone -d ${domain} -m ${contact_email} --agree-tos --eff-email
  - cat /etc/letsencrypt/live/${domain}/fullchain.pem /etc/letsencrypt/live/${domain}/privkey.pem > /etc/ssl/certs/haproxy.pem
  - chmod 600 /etc/ssl/certs/haproxy.pem

  - apt-get -y install pip python3-flask python3-flask-limiter python3-psycopg2 python3-boto3 python3-gunicorn gunicorn python3-marshmallow python3-bcrypt
  - cd /var && git clone https://github.com/tatliHU/memewebsite.git
  - systemctl daemon-reload
  - systemctl enable backup.timer
  - systemctl start backup.timer
  - systemctl enable meme
  - systemctl start meme

  - apt -y install haproxy
  - cat /tmp/haproxy.txt >> /etc/haproxy/haproxy.cfg
  - systemctl enable haproxy
  - systemctl start haproxy
  - systemctl restart haproxy

package_update: true
package_upgrade: true
packages:
  - git
  - unzip